{"version":3,"file":"component---src-pages-404-tsx-dcdc6b4096866e34a221.js","mappings":"uJA2CA,IAhCsC,SAAH,GAI5B,IAHLA,EAAQ,EAARA,SACAC,EAAK,EAALA,MACAC,EAAQ,EAARA,SAGMC,EAD6B,MAChBH,EAASI,SACtBC,EAASF,EAEXG,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,gBACZD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAKR,IAIhBK,EAAAA,cAACE,EAAAA,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCR,GAIP,OACEK,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBAAiB,oBAAmBJ,GACjDG,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,iBAAiBF,GACnCC,EAAAA,cAAAA,OAAAA,KAAOJ,GACPI,EAAAA,cAAAA,SAAAA,KAAAA,MACK,IAAII,MAAOC,cAAa,eAC1B,IACDL,EAAAA,cAAAA,IAAAA,CAAGM,KAAK,4BAA0B,WAI1C,C,+CCkBA,IA3CgC,SAAH,GAItB,IAAD,MAHJC,EAAW,EAAXA,YACAZ,EAAK,EAALA,MACAC,EAAQ,EAARA,SAEQY,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAgBFE,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjBE,EAAmBlB,MAExC,OACEK,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQY,EAAkBjB,EAAK,MAAMiB,EAAiBjB,GACtDK,EAAAA,cAAAA,OAAAA,CAAMc,KAAK,cAAcC,QAASL,IAClCV,EAAAA,cAAAA,OAAAA,CAAMgB,SAAS,WAAWD,QAASpB,IACnCK,EAAAA,cAAAA,OAAAA,CAAMgB,SAAS,iBAAiBD,QAASL,IACzCV,EAAAA,cAAAA,OAAAA,CAAMgB,SAAS,UAAUD,QAAQ,YACjCf,EAAAA,cAAAA,OAAAA,CAAMc,KAAK,eAAeC,QAAQ,YAClCf,EAAAA,cAAAA,OAAAA,CACEc,KAAK,kBACLC,SAA0B,QAAjB,EAAAP,EAAKG,oBAAY,OAAQ,QAAR,EAAjBM,EAAmBC,cAAM,WAAR,EAAjBC,EAA2BC,UAAW,KAEjDpB,EAAAA,cAAAA,OAAAA,CAAMc,KAAK,gBAAgBC,QAASpB,IACpCK,EAAAA,cAAAA,OAAAA,CAAMc,KAAK,sBAAsBC,QAASL,IACzCd,EAGP,C,mGC3BayB,EAAO,WAAH,OAASrB,EAAAA,cAACsB,EAAAA,EAAG,CAAC3B,MAAM,kBAAmB,EAExD,UAbkD,SAAH,GAA2B,IAArB4B,EAAI,EAAJA,KAAM7B,EAAQ,EAARA,SACnD8B,EAAYD,EAAKf,KAAKG,aAAahB,MAEzC,OACEK,EAAAA,cAACyB,EAAAA,EAAM,CAAC/B,SAAUA,EAAUC,MAAO6B,GACjCxB,EAAAA,cAAAA,KAAAA,KAAAA,kBACAA,EAAAA,cAAAA,IAAAA,KAAAA,2DAGN,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/404.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\ninterface LayoutProps {\n  location: {\n    pathname: string;\n  };\n  title: string;\n  children: JSX.Element[];\n}\n\nconst Layout: React.FC<LayoutProps> = ({\n  location,\n  title,\n  children,\n}) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n  const header = isRootPath\n    ? (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n    : (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    );\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {\" \"}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SeoProps {\n  description?: string;\n  title: string;\n  children?: JSX.Element[];\n}\n\nconst Seo: React.FC<SeoProps> = ({\n  description,\n  title,\n  children,\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || \"\"}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\ninterface NotFoundPageProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n      };\n    };\n  };\n  location: {\n    pathname: string;\n  };\n}\n\nconst NotFoundPage: React.FC<NotFoundPageProps> = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  );\n};\n\nexport const Head = () => <Seo title=\"404: Not Found\" />;\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n"],"names":["location","title","children","isRootPath","pathname","header","React","className","Link","to","Date","getFullYear","href","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","Head","Seo","data","siteTitle","Layout"],"sourceRoot":""}